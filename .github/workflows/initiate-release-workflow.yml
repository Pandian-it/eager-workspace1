name: Create Release Branch

on:
  workflow_dispatch:
    inputs:
      release_branch:
        description: 'Name of the new release branch'
        required: true

jobs:
  create-release-branch:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      # 1. Checkout develop
      - name: Checkout develop
        uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0

      # 2. Create release branch from develop
      - name: Create release branch
        run: |
          git checkout -b ${{ github.event.inputs.release_branch }}
          git push origin ${{ github.event.inputs.release_branch }}

      # 3. Checkout release branch explicitly
      - name: Checkout release branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.release_branch }}
          fetch-depth: 0

      # 4. Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm

      # 5. Install dependencies
      - name: Install dependencies
        run: npm install

      # 6. Override changeset baseBranch to release branch
      - name: Override changeset baseBranch
        run: |
          jq '.baseBranch = env.RELEASE_BRANCH' .changeset/config.json > tmp.json
          mv tmp.json .changeset/config.json
        env:
          RELEASE_BRANCH: ${{ github.event.inputs.release_branch }}

      # 7. Run changesets/action to bump versions & open PR
      - name: Version packages and open PR
        uses: changesets/action@v1
        with:
          version: true
          publish: false
          commit: "chore: version packages"
          title: "Version Packages"
          body: "This PR bumps package versions and updates changelogs based on the changesets"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 8. Checkout the version branch created by changesets/action
      - name: Checkout version branch
        run: |
          VERSION_BRANCH="changeset-${{ github.event.inputs.release_branch }}"
          git fetch origin $VERSION_BRANCH:$VERSION_BRANCH
          git checkout $VERSION_BRANCH

      # 9. Generate/update deployment manifest in the version branch
      - name: Generate/update deployment manifest
        run: |
          RELEASE_VERSION="${{ github.event.inputs.release_branch##*/ }}"
          MANIFEST_FILE="deployment-manifest.json"

          echo "{" > $MANIFEST_FILE
          COUNT=0

          PROJECTS=$(npx nx show projects --plain)

          for proj in $PROJECTS; do
            VERSION=$(node -p "require('./projects/$proj/package.json').version")
            if [ $COUNT -gt 0 ]; then
              echo "," >> $MANIFEST_FILE
            fi
            echo "  \"$proj\": {\"version\": \"$VERSION\", \"release\": \"$RELEASE_VERSION\"}" >> $MANIFEST_FILE
            COUNT=$((COUNT+1))
          done

          echo "}" >> $MANIFEST_FILE
          cat $MANIFEST_FILE

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add $MANIFEST_FILE
          git commit -m "ci: update deployment manifest" || echo "No changes to commit"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} HEAD